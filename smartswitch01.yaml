substitutions:
  # === Main settings and variabled ===
  devicename: smartswitch01
  friendly_devicename: "Boiler SmartSwitch"
  
  # === Pin assignment CB3S ===
  pin_relay: P6                # relay pin
  pin_button: P20              # button pin
  pin_status_led: P26          # on/off status led
  pin_wifi_status_led: P22     # wifi status led

esphome:
  name: ${devicename}
  friendly_name: ${friendly_devicename}
  on_boot:
    priority: -100
    then:
      - if:
          condition:
            switch.is_on: relay_1
          then:
            - light.turn_on: light_led_1
          else:
            - light.turn_off: light_led_1


# ================= Autonomous shedule handling ================

globals:
  - id: schedule_string
    type: std::string
    restore_value: yes
    initial_value: '""'

time:
  - platform: homeassistant
    id: home_assistant_time
    timezone: !secret timezone
    on_time_sync:
      - logger.log: "Time has been synchronized from Home Assistant."

interval:
  - interval: 1sec
    then:
      - lambda: |-
          auto now = id(home_assistant_time).now();
          if (!now.is_valid()) {
            ESP_LOGD("scheduler", "Time not synced yet, skipping schedule check.");
            return;
          }

          std::string schedule = id(schedule_string);
          if (schedule.empty()) {
            ESP_LOGD("scheduler", "Schedule is empty, skipping check.");
            return;
          }
          
          bool should_be_on = false;
          int current_minute_of_day = now.hour * 60 + now.minute;

          size_t start_pos = 0;
          while (start_pos < schedule.length()) {
            size_t end_pos = schedule.find(';', start_pos);
            if (end_pos == std::string::npos) {
              end_pos = schedule.length();
            }
            
            std::string period = schedule.substr(start_pos, end_pos - start_pos);
            size_t dash_pos = period.find('-');
            if (dash_pos != std::string::npos) {
              std::string start_time_str = period.substr(0, dash_pos);
              std::string end_time_str = period.substr(dash_pos + 1);
              
              int start_hour, start_min, end_hour, end_min;
              if (sscanf(start_time_str.c_str(), "%d:%d", &start_hour, &start_min) == 2 &&
                  sscanf(end_time_str.c_str(), "%d:%d", &end_hour, &end_min) == 2) {
                  
                int start_minute_of_day = start_hour * 60 + start_min;
                int end_minute_of_day = end_hour * 60 + end_min;
                
                if (current_minute_of_day >= start_minute_of_day && current_minute_of_day < end_minute_of_day) {
                  should_be_on = true;
                  break; 
                }
              }
            }
            start_pos = end_pos + 1;
          }

          if (should_be_on && !id(relay_1).state) {
            ESP_LOGI("scheduler", "Time is within schedule. Turning relay ON.");
            id(relay_1).turn_on();
          } else if (!should_be_on && id(relay_1).state) {
            ESP_LOGI("scheduler", "Time is outside schedule. Turning relay OFF.");
            id(relay_1).turn_off();
          }

# =========== Schedule block end ====================

preferences:
    flash_write_interval: 1min

bk72xx:
  board: cb3s

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: NONE
  ap:
    ssid: "${devicename} Fallback Hotspot"
    password: !secret fallback_password

logger:
web_server:
captive_portal:
mdns:
  disabled: False

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

sensor:
  - platform: uptime
    name: "${friendly_devicename} Uptime"
  - platform: wifi_signal
    name: "${friendly_devicename} WiFi Signal"
    update_interval: 60s

text_sensor:
  - platform: homeassistant
    id: ha_schedule_input
    entity_id: input_text.smartswitch_schedule
    internal: true
    on_value:
      then:
        - logger.log:
            level: DEBUG
            format: "New schedule received from HA: %s"
            args: [x.c_str()]
        - lambda: |-
            id(schedule_string) = x;
            
  - platform: libretiny
    version:
      name: "${friendly_devicename} LibreTiny Version"

output:
  - platform: libretiny_pwm
    id: output_led_state
    pin:
      number: ${pin_status_led}
      inverted: true

light:
  - platform: monochromatic
    id: light_led_1
    name: "${friendly_devicename} Blue LED"
    output: output_led_state
    internal: true

binary_sensor:
  - platform: gpio
    id: binary_switch_1
    internal: True
    pin:
      number: ${pin_button}
      inverted: true
      mode: INPUT_PULLUP
    on_press:
      then:
        - switch.toggle: relay_1

switch:
  - platform: gpio
    id: relay_1
    name: "${friendly_devicename} Relay"
    pin: ${pin_relay}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - light.turn_on: light_led_1
    on_turn_off:
      - light.turn_off: light_led_1

status_led:
  pin:
    number: ${pin_wifi_status_led}
    inverted: true
